name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  MONGODB_URI: ${{ secrets.MONGODB_URI }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ----------------- Checkout -----------------
      - uses: actions/checkout@v3
        name: ⬇️ Checkout repository

      # ----------------- Node.js -----------------
      - uses: actions/setup-node@v3
        name: ⎔ Setup Node.js
        with:
          node-version: 20
          cache: 'npm'

      # ----------------- Install dependencies -----------------
      - run: npm ci
        name: 📥 Install dependencies

      - run: npm run format
        name: 💅 Prettier format

      - run: npm run lint
        name: 🔬 Linting

      - run: npm run check
        name: 🧾 Prettier check

      # ----------------- Build Next.js locally -----------------
      - run: npm run build
        name: 🏗 Build Next.js
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

      # ----------------- Docker Login -----------------
      - name: 🐳 Docker Login
        if: ${{ env.DOCKER_USER != '' && env.DOCKERHUB_PASSWORD != '' }}
        run: |
          DOCKER_USER=${DOCKER_USER:-ivaros}
          echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKER_USER}" --password-stdin
          echo "✅ Docker login successful"
          docker info | grep "Username"

      # ----------------- Docker Buildx Setup -----------------
      - name: ⚡ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ----------------- Docker Build & Push -----------------
      - name: 📦 Docker Build & Push
        run: |
          DOCKER_USER=${DOCKER_USER:-ivaros}
          IMAGE_NAME=$DOCKER_USER/paro-master

          echo "🧹 Removing old container if exists"
          docker rm -f paro-master || true

          echo "🧼 Removing old image if exists"
          docker rmi -f $IMAGE_NAME:latest || true

          echo "🔨 Building Docker image with Buildx and cache"
          docker buildx build \
            --build-arg MONGODB_URI=${MONGODB_URI} \
            --platform linux/amd64 \
            --tag $IMAGE_NAME:latest \
            --tag $IMAGE_NAME:${GITHUB_SHA} \
            --cache-from=type=registry,ref=$IMAGE_NAME:latest \
            --push .

          echo "✅ Docker images pushed successfully"

      # ----------------- Run Docker Container -----------------
      - name: 🐳 Run Docker Container
        run: |
          DOCKER_USER=${DOCKER_USER:-ivaros}
          IMAGE_NAME=$DOCKER_USER/paro-master
          CONTAINER_NAME=paro-master

          echo "🌀 Starting container"
          docker rm -f $CONTAINER_NAME || true
          docker run -d --name $CONTAINER_NAME \
            -p 3030:3000 \
            -e NODE_ENV=production \
            -e MONGODB_URI=${MONGODB_URI} \
            -e NEXTAUTH_SECRET=${NEXTAUTH_SECRET} \
            $IMAGE_NAME:latest

          echo "⏳ Waiting for container to start..."
          sleep 15

      # ----------------- Healthcheck -----------------
      - name: 📡 Healthcheck
        id: healthcheck
        continue-on-error: true
        run: |
          echo "📦 Container logs:"
          docker logs paro-master || true

          STATUS="failure"
          for i in {1..5}; do
            echo "⏳ Checking health... attempt $i"
            if curl -sf http://localhost:3030 > /dev/null; then
              STATUS="success"
              break
            fi
            sleep 5
          done

          echo "status=$STATUS" >> $GITHUB_OUTPUT

          if [ "$STATUS" = "success" ]; then
            echo "✅ Application is healthy"
          else
            echo "❌ Application is not reachable after 5 attempts"
            exit 1
          fi

      # ----------------- CI/CD Start Time -----------------
      - name: 🕒 Save start time
        run: echo "START_TIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      # ----------------- Telegram Notification -----------------
      - name: 📲 Send Telegram Notification
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_CHAT_ID }}
          token: ${{ env.TELEGRAM_BOT_TOKEN }}
          message: |
            🚀 CI/CD завершен!
            📦 Образ: ${{ github.sha }}
            🩺 HealthCheck: ${{ steps.healthcheck.outputs.status || 'unknown' }}
            🔗 Репозиторий: ${{ github.repository }}
            🕒 Время: ${{ env.START_TIME }}

