name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  DATABASE_URL: ${{ secrets.MONGODB_URI }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ----------------- Checkout -----------------
      - uses: actions/checkout@v3
        name: ⬇️ Checkout repository

      # ----------------- Node.js -----------------
      - uses: actions/setup-node@v3
        name: ⎔ Setup Node.js
        with:
          node-version: 22
          cache: 'npm'

      # ----------------- Dependencies -----------------
      - run: npm install
        name: 📥 Install dependencies

      - run: npm run format
        name: 💅 Prettier format

      - run: npm run lint
        name: 🔬 Linting

      - run: npm run check
        name: Prettier check

      # ----------------- Build -----------------
      - run: npm run build
        name: 🏗 Build Next.js
        env:
          DATABASE_URL: ${{ secrets.MONGODB_URI }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

      # ----------------- Docker Login -----------------
      - name: 🐳 Docker Login
        if: env.DOCKER_USER
        run: echo "${{ env.DOCKERHUB_PASSWORD }}" | docker login -u "${{ env.DOCKER_USER }}" --password-stdin

      # ----------------- Docker Build & Push -----------------
      - name: 📦 Docker Build & Push
        if: env.DOCKER_USER
        run: |
          IMAGE_NAME=${{ env.DOCKER_USER }}/paro-master

          echo "🧹 Removing old container if exists"
          docker rm -f paro-master || true

          echo "🧼 Removing old image if exists"
          docker rmi -f $IMAGE_NAME:latest || true

          echo "🔨 Building Docker image"
          docker build -t $IMAGE_NAME:latest .

          echo "🏷️ Tagging Docker image"
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ github.sha }}

          echo "🚀 Pushing Docker image"
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

      # ----------------- Run Container -----------------
      - name: 🐳 Run Docker Container
        run: |
          IMAGE_NAME=${{ env.DOCKER_USER:-ivaros }}/paro-master
          CONTAINER_NAME=paro-master

          echo "🌀 Starting container"
          docker rm -f $CONTAINER_NAME || true
          docker run -d --rm --name $CONTAINER_NAME \
            -p 3030:3000 \
            -e NODE_ENV=production \
            -e DATABASE_URL=${{ secrets.MONGODB_URI }} \
            -e NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            $IMAGE_NAME:latest \
            sh -c "next start -H 0.0.0.0 -p 3000"

          echo "⏳ Waiting for container to start..."
          sleep 10

      # ----------------- Healthcheck -----------------
      - name: 📡 Healthcheck
        id: healthcheck
        run: |
          if curl -sf http://localhost:3030; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1

          echo "📦 Container logs:"
          docker logs paro-master

      # ----------------- Telegram Notification -----------------
      - name: 📲 Send Telegram Notification
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ env.TELEGRAM_CHAT_ID }}
          token: ${{ env.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ CI/CD завершен!
            📦 Образ: ${{ github.sha }}
            🩺 Статус HealthCheck: ${{ steps.healthcheck.outputs.status }}
            🔗 Репозиторий: ${{ github.repository }}
