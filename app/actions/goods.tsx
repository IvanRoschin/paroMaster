'use server';

import mongoose from 'mongoose';

import { buildFilter } from '@/helpers/server';
import Good from '@/models/Good';
import Testimonial from '@/models/Testimonial';
import {
  IGoodDB,
  IGoodUI,
  IMinMaxPriceResponse,
  ISearchParams,
} from '@/types/index';
import { connectToDB } from '@/utils/dbConnect';

export interface IGetAllGoods {
  success: boolean;
  goods: IGoodUI[];
  count: number;
}

export type IGoodCreate = Omit<IGoodDB, '_id'>;

// ======================= –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è =======================
function serializeGood(g: any): IGoodUI {
  return {
    _id: g._id.toString(),
    title: g.title,
    description: g.description,
    price: g.price,
    discountPrice: g.discountPrice ?? 0,
    src: Array.isArray(g.src) ? g.src : g.src ? [g.src] : [],
    category: g.category
      ? {
          _id: g.category._id.toString(),
          name: g.category.name,
          slug: g.category.slug || '',
          src: g.category.src || '',
        }
      : null,
    brand: g.brand
      ? {
          _id: g.brand._id.toString(),
          name: g.brand.name,
          slug: g.brand.slug || '',
          src: g.brand.src || undefined,
          country: g.brand.country || undefined,
          website: g.brand.website || undefined,
        }
      : null,
    model: g.model ?? '',
    sku: g.sku ?? '',
    isNew: g.isNew ?? false,
    isAvailable: g.isAvailable ?? true,
    isDailyDeal: g.isDailyDeal ?? false,
    isCompatible: g.isCompatible ?? false,
    compatibleGoods: Array.isArray(g.compatibleGoods)
      ? g.compatibleGoods.map((cg: any) =>
          typeof cg === 'string' ? cg : cg._id
        )
      : [],
    quantity: g.quantity ?? 0,
    averageRating: g.averageRating ?? 0,
    ratingCount: g.ratingCount ?? 0,
  };
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏.
 *
 * @param currentGoodId - ID —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
 * @param newIds - –Ω–æ–≤—ã–µ ID —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
 * @param oldIds - —Å—Ç–∞—Ä—ã–µ ID —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
 */
export async function syncCompatibilityRelations(
  currentGoodId: string,
  newIds: string[] = [],
  oldIds: string[] = []
) {
  const added = newIds.filter(id => !oldIds.includes(id));
  const removed = oldIds.filter(id => !newIds.includes(id));

  await Promise.all([
    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
    ...added.map(async cgId => {
      const g = await Good.findById(cgId);
      if (!g) return;
      const gIds = g.compatibleGoods.map(String);
      if (!gIds.includes(currentGoodId)) g.compatibleGoods.push(currentGoodId);
      g.isCompatible = true;
      await g.save();
    }),

    // ‚ûñ –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–≤—è–∑–∏
    ...removed.map(async cgId => {
      const g = await Good.findById(cgId);
      if (!g) return;
      g.compatibleGoods = g.compatibleGoods
        .map(String)
        .filter((id: string) => id !== currentGoodId);
      g.isCompatible = g.compatibleGoods.length > 0;
      await g.save();
    }),
  ]);
}

// ======================= ACTIONS =======================

export async function getAllGoods(
  searchParams: ISearchParams
): Promise<IGetAllGoods> {
  const filter = await buildFilter(searchParams);

  const currentPage = Number(searchParams.page) || 1;
  const limit = Number(searchParams.limit) || 20;
  const skip = (currentPage - 1) * limit;

  try {
    await connectToDB();

    const count = await Good.countDocuments(filter);

    const goods = await Good.find(filter)
      .populate('category', 'name slug src')
      .populate('brand', 'name slug src country website')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .exec();

    const serializedGoods: IGoodUI[] = goods.map(serializeGood);

    return {
      success: true,
      goods: serializedGoods,
      count,
    };
  } catch (error) {
    console.error('Error fetching goods:', error);
    return { success: false, goods: [], count: 0 };
  }
}

export async function getGoodsByBrand(
  brandId: string,
  excludeId?: string
): Promise<IGoodUI[]> {
  await connectToDB();

  const query: any = { brand: new mongoose.Types.ObjectId(brandId) };
  if (excludeId) query._id = { $ne: new mongoose.Types.ObjectId(excludeId) };

  const goods = await Good.find(query)
    .populate('brand')
    .populate('category')
    .lean();

  return goods.map(serializeGood);
}

export async function getDailyDeals(maxPrice: number): Promise<IGoodUI[]> {
  await connectToDB();

  const dailyDeals = await Good.find({
    discountPrice: { $lt: maxPrice },
    isAvailable: true,
  }).limit(4);

  return dailyDeals.map(serializeGood);
}

export async function getGoodById(id: string): Promise<IGoodUI | null> {
  await connectToDB();

  // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä —Å populated brand –∏ category
  const good = await Good.findById(id)
    .populate('category', 'name slug src')
    .populate('brand', 'name slug src country website');

  if (!good) return null;

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
  const testimonials = await Testimonial.find({
    product: id,
    isActive: true,
  }).sort({ createdAt: -1 });

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∏—Ö _id
  const compatibleGoodsRecords = await Good.find({
    _id: { $in: good.compatibleGoods }, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ ID
    isCompatible: true,
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ plain object
  const plainGood: IGoodUI = {
    ...serializeGood(good), // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç plain –æ–±—ä–µ–∫—Ç
    testimonials: testimonials.map(t => ({
      _id: t._id.toString(),
      name: t.name,
      text: t.text,
      rating: t.rating,
      createdAt: t.createdAt.toISOString(),
      updatedAt: t.updatedAt.toISOString(),
      isActive: t.isActive,
    })),
    compatibleGoods: compatibleGoodsRecords.map(g => serializeGood(g)), // –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
  };

  return plainGood;
}

// üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
export async function addGood(formData: FormData) {
  const values: Record<string, any> = {};

  // 1Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º FormData ‚Üí –æ–±—ä–µ–∫—Ç
  formData.forEach((value, key) => {
    const cleanKey = key.replace(/\[\]$/, '');
    if (key.endsWith('[]')) {
      if (!Array.isArray(values[cleanKey])) values[cleanKey] = [];
      values[cleanKey].push(value);
    } else {
      values[cleanKey] = value;
    }
  });

  // 2Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã
  values.price = Number(values.price);
  values.discountPrice = Number(values.discountPrice ?? 0);

  // 3Ô∏è‚É£ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  const requiredFields = [
    'category',
    'title',
    'brand',
    'model',
    'sku',
    'price',
    'description',
    'src',
  ];

  for (const field of requiredFields) {
    if (
      !values[field] ||
      (Array.isArray(values[field]) && values[field].length === 0)
    ) {
      return { success: false, message: `–ü–æ–ª–µ "${field}" —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º` };
    }
  }

  // 4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const compatibleGoodsIds: string[] = values.compatibleGoods
    ? Array.isArray(values.compatibleGoods)
      ? values.compatibleGoods
      : [values.compatibleGoods]
    : [];

  try {
    await connectToDB();

    // 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã SKU
    const existingGood = await Good.findOne({ sku: values.sku });
    if (existingGood)
      return { success: false, message: '–¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º SKU –≤–∂–µ —ñ—Å–Ω—É—î' };

    // 6Ô∏è‚É£ –ï—Å–ª–∏ isCompatible –≤—ã–∫–ª—é—á–µ–Ω ‚Üí —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—á–∏—â–∞–µ–º
    const isCompatibleFlag =
      values.isCompatible === 'true' || values.isCompatible === true;

    const finalCompatibleGoods =
      isCompatibleFlag && compatibleGoodsIds.length > 0
        ? compatibleGoodsIds
        : [];

    // 7Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    const newGood: IGoodCreate = {
      category: values.category,
      brand: values.brand,
      title: values.title,
      model: values.model,
      sku: values.sku,
      price: values.price,
      discountPrice: values.discountPrice,
      description: values.description,
      src: Array.isArray(values.src) ? values.src : [values.src],
      isNew: values.isNew === 'true' || values.isNew === true,
      isAvailable: values.isAvailable === 'true' || values.isAvailable === true,
      isDailyDeal: values.isDailyDeal === 'true' || values.isDailyDeal === true,
      isCompatible: isCompatibleFlag && finalCompatibleGoods.length > 0,
      compatibleGoods: finalCompatibleGoods,
    };

    // 8Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä
    const createdGood = await Good.create(newGood);
    const currentGoodId = createdGood._id.toString();

    // 9Ô∏è‚É£ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (isCompatibleFlag && finalCompatibleGoods.length > 0) {
      await syncCompatibilityRelations(currentGoodId, finalCompatibleGoods, []);
    }

    return { success: true, message: '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ' };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:', error);

    if (error instanceof mongoose.Error.ValidationError) {
      const fieldErrors = Object.values(error.errors)
        .map(e => e.message)
        .join(', ');
      return { success: false, message: `–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${fieldErrors}` };
    }

    return {
      success: false,
      message: error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
    };
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
 * –í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–ª–∞–≥–æ–≤, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
 */
export async function updateGood(formData: FormData) {
  const values: Record<string, any> = {};

  // 1Ô∏è‚É£ –†–∞–∑–±–æ—Ä FormData
  formData.forEach((value, key) => {
    const cleanKey = key.replace(/\[\]$/, '');
    if (key.endsWith('[]')) {
      if (!Array.isArray(values[cleanKey])) values[cleanKey] = [];
      values[cleanKey].push(value);
    } else {
      values[cleanKey] = value;
    }
  });

  const {
    id,
    category,
    brand,
    src,
    model,
    sku,
    title,
    description,
    price,
    discountPrice,
    isNew,
    isAvailable,
    isDailyDeal,
    isCompatible,
    compatibleGoods,
    dealExpiresAt,
  } = values;

  try {
    await connectToDB();

    // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
    const existingGood = await Good.findById(id);
    if (!existingGood) {
      return { success: false, message: '–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' };
    }

    const currentGoodId = existingGood._id.toString();
    const oldCompatibleGoods = (existingGood.compatibleGoods || []).map(String);

    // 3Ô∏è‚É£ –ï—Å–ª–∏ isCompatible –≤—ã–∫–ª—é—á–µ–Ω ‚Üí —á–∏—Å—Ç–∏–º —Å–≤—è–∑–∏
    if (isCompatible === 'false' || isCompatible === false) {
      await Good.updateMany(
        { compatibleGoods: currentGoodId },
        { $pull: { compatibleGoods: currentGoodId } }
      );

      existingGood.compatibleGoods = [];
      existingGood.isCompatible = false;
      await existingGood.save();

      return { success: true, message: '–°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É' };
    }

    // 4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const newCompatibleGoods = Array.isArray(compatibleGoods)
      ? compatibleGoods
      : compatibleGoods
        ? [compatibleGoods]
        : [];

    // 5Ô∏è‚É£ –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateFields: Partial<IGoodDB> = {
      category: category || undefined,
      brand: brand || undefined,
      src: src ? (Array.isArray(src) ? src : [src]) : undefined,
      model,
      sku,
      title,
      description,
      price: price !== undefined ? Number(price) : undefined,
      discountPrice:
        discountPrice !== undefined ? Number(discountPrice) : undefined,
      isNew: isNew === 'true' || isNew === true,
      isAvailable: isAvailable === 'true' || isAvailable === true,
      isDailyDeal: isDailyDeal === 'true' || isDailyDeal === true,
      isCompatible: newCompatibleGoods.length > 0,
      compatibleGoods: newCompatibleGoods,
      dealExpiresAt: dealExpiresAt
        ? new Date(dealExpiresAt).toISOString()
        : undefined,
    };

    // –£–¥–∞–ª—è–µ–º undefined / –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
    Object.keys(updateFields).forEach(key => {
      const val = updateFields[key as keyof IGoodDB];
      if (val === undefined || val === '') {
        delete updateFields[key as keyof IGoodDB];
      }
    });

    // 6Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
    const updatedGood = await Good.findByIdAndUpdate(id, updateFields, {
      new: true,
    });

    if (!updatedGood) {
      return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É' };
    }

    // 7Ô∏è‚É£ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    await syncCompatibilityRelations(
      currentGoodId,
      newCompatibleGoods,
      oldCompatibleGoods
    );

    return { success: true, message: '–¢–æ–≤–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ' };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:', error);
    return {
      success: false,
      message:
        error instanceof Error
          ? error.message
          : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ',
    };
  }
}

export async function getMinMaxPrice(): Promise<IMinMaxPriceResponse> {
  try {
    await connectToDB();
    const result = await Good.aggregate([
      {
        $project: {
          price: { $toDouble: '$price' },
          discountPrice: { $toDouble: '$discountPrice' },
        },
      },
      { $match: { price: { $ne: null } } },
      {
        $group: {
          _id: null,
          minPrice: { $min: '$price' },
          maxPrice: { $max: '$price' },
          minDiscountPrice: { $min: '$discountPrice' },
          maxDiscountPrice: { $max: '$discountPrice' },
        },
      },
      {
        $project: {
          _id: 0,
          minPrice: 1,
          maxPrice: 1,
          minDiscountPrice: 1,
          maxDiscountPrice: 1,
        },
      },
    ]).exec();
    if (!result.length)
      return {
        success: false,
        minPrice: null,
        maxPrice: null,
        minDiscountPrice: null,
        maxDiscountPrice: null,
        message: 'No valid goods found',
      };
    return {
      success: true,
      minPrice: result[0].minPrice,
      maxPrice: result[0].maxPrice,
      minDiscountPrice: result[0].minDiscountPrice,
      maxDiscountPrice: result[0].maxDiscountPrice,
    };
  } catch (error: any) {
    console.error('Error fetching min/max price:', error);
    return {
      success: false,
      minPrice: null,
      maxPrice: null,
      minDiscountPrice: null,
      maxDiscountPrice: null,
      message: error.message,
    };
  }
}

export async function getMostPopularGoods(limit = 10): Promise<IGoodUI[]> {
  try {
    await connectToDB();

    const popularGoods = await Good.find({ isAvailable: true })
      .sort({ averageRating: -1, ratingCount: -1 }) // —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É, –ø–æ—Ç–æ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤
      .limit(limit)
      .populate('category', 'name slug src')
      .populate('brand', 'name slug src country website')
      .exec();

    // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ plain objects
    const serializedGoods: IGoodUI[] = popularGoods.map(serializeGood);

    return serializedGoods;
  } catch (error) {
    console.error('Error fetching most popular goods:', error);
    return [];
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ id –≤–º–µ—Å—Ç–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º
 * @param id - ID —Ç–æ–≤–∞—Ä–∞
 */
export async function deleteGood(id: string): Promise<void> {
  if (!id) return;
  await connectToDB();
  await Testimonial.deleteMany({ product: id });
  await Good.findByIdAndDelete(id);
}
