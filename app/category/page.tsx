import { Suspense } from 'react';

import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from '@tanstack/react-query';

import { getAllBrands } from '@/actions/brands';
import { getAllCategories } from '@/actions/categories';
import { getAllGoods } from '@/actions/goods';
import Breadcrumbs from '@/components/common/Breadcrumbs';
import { IGoodUI } from '@/types/index';
import { ISearchParams } from '@/types/searchParams';
import { EmptyState, ProductList, ProductListSkeleton } from '../components';

interface GoodsData {
  goods: IGoodUI[];
}

export const dynamic = 'force-dynamic';

// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è generateMetadata
export async function generateMetadata({
  searchParams,
}: {
  searchParams: Promise<ISearchParams>;
}) {
  const params = await searchParams;

  const categoriesResponse = await getAllCategories(params);
  const categories = (categoriesResponse.categories ?? []).map(c => ({
    value: String(c._id),
    label: c.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∏',
    slug: c.slug,
    name: c.name,
  }));

  const currentCategory = categories.find(
    c => c.slug === params.category || c.value === params.category
  );

  const categoryName = currentCategory?.name ?? '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è';

  return {
    title: `–ö—É–ø–∏—Ç–∏ ${params.category} ‚Äî ${categoryName} | –ù–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É`,
    description: `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è ${categoryName}. –û–±–µ—Ä—ñ—Ç—å –Ω–∞–π–∫—Ä–∞—â—ñ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –≤–∏–≥—ñ–¥–Ω–æ—é —Ü—ñ–Ω–æ—é.`,
  };
}

// ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
export default async function CategoryPage({
  searchParams,
}: {
  searchParams: Promise<ISearchParams>;
}) {
  // üëá –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ await ‚Äî –≤ Next.js 15 searchParams —ç—Ç–æ Promise
  const params = await searchParams;

  const queryClient = new QueryClient();
  const goodsKey = ['goods', params];

  await queryClient.prefetchQuery({
    queryKey: goodsKey,
    queryFn: () => getAllGoods(params),
  });

  const queryState = queryClient.getQueryState(goodsKey);
  const goods = (queryState?.data as GoodsData)?.goods || [];

  const [categoriesResponse, brandsResponse] = await Promise.all([
    getAllCategories(params),
    getAllBrands(params),
  ]);

  const categories = (categoriesResponse.categories ?? [])
    .filter(c => c._id)
    .map(c => ({
      value: String(c._id),
      label: c.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∏',
      slug: c.slug,
      name: c.name,
    }));

  const brands = (brandsResponse.brands ?? [])
    .filter(b => b._id)
    .map(b => ({
      value: String(b._id),
      label: b.name ?? '–ë–µ–∑ –Ω–∞–∑–≤–∏',
    }));

  const currentCategory = categories.find(
    c => c.slug === params.category || c.value === params.category
  );

  const categoryName = currentCategory?.name ?? '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è';

  if (!goods || goods.length === 0) {
    return (
      <EmptyState
        showReset
        title={`–í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —É –≤–∏–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${categoryName}`}
        actionHref="/catalog"
      />
    );
  }

  return (
    <HydrationBoundary state={dehydrate(queryClient)}>
      <div className="max-w-6xl mx-auto px-4 pt-3 container">
        <Breadcrumbs />
        <h2 className="subtitle mb-3 text-center">
          {categoryName}{' '}
          <span className="text-sm text-gray-500">({goods.length})</span>
        </h2>
        <Suspense fallback={<ProductListSkeleton />}>
          <ProductList
            key={params.category}
            goods={goods}
            categories={categories}
            brands={brands}
            initialCategory={currentCategory?.value}
          />
        </Suspense>
      </div>
    </HydrationBoundary>
  );
}
