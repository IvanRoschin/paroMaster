'use client';

import { useRouter } from 'next/navigation';

import { Heading } from '@/components/sections';
import { Button } from '@/components/ui';

interface EmptyStateProps {
  title?: string;
  subtitle?: string;
  showReset?: boolean;
  category?: string;
  onReset?: () => void;
  actionLabel?: string; // —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
  actionHref?: string; // –ø—É—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
  onAction?: () => void; // –∫–æ–ª–±–µ–∫ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
}

const EmptyState: React.FC<EmptyStateProps> = ({
  title = '–í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ ü§∑‚Äç‚ôÇÔ∏è',
  subtitle = '–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ ‚öôÔ∏è',
  showReset,
  category,
  onReset,
  actionLabel,
  actionHref,
  onAction,
}) => {
  const router = useRouter();
  return (
    <div className="h-[60vh] flex flex-col gap-2 justify-center items-center">
      <Heading center title={title} subtitle={subtitle} category={category} />
      <div className="flex flex-col gap-2 mt-4 w-48">
        {showReset && (
          <Button
            type="button"
            outline
            label="–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏"
            onClick={() => (onReset ? onReset() : router.push('/'))}
          />
        )}
        {actionLabel && (actionHref || onAction) && (
          <Button
            type="button"
            label={actionLabel}
            onClick={() => {
              if (onAction) return onAction();
              if (actionHref) return router.push(actionHref);
            }}
            outline
            color="border-green-400"
          />
        )}
      </div>
    </div>
  );
};

export default EmptyState;
